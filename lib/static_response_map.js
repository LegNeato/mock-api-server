// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var buildResponseMap, buildStaticResponseEntry, cache$, each, entryAllowedForRequest, filter, keys, last, patternMatcher, size, sortBy, stripExtension, url;
  patternMatcher = require('./pattern_matcher');
  cache$ = require('underscore');
  each = cache$.each;
  filter = cache$.filter;
  keys = cache$.keys;
  last = cache$.last;
  size = cache$.size;
  sortBy = cache$.sortBy;
  url = require('url');
  stripExtension = function (path) {
    return path.replace(/\.json$/, '');
  };
  buildStaticResponseEntry = function (filename, content) {
    var aUrl, path, query;
    aUrl = url.parse(filename, true);
    path = stripExtension(aUrl.pathname);
    query = aUrl.query;
    return {
      path: path,
      query: query,
      content: content
    };
  };
  buildResponseMap = function (fsHash) {
    var responseMap;
    responseMap = {};
    each(fsHash, function (content, filename) {
      var entry;
      entry = buildStaticResponseEntry(filename, content);
      if (null != responseMap[entry.path])
        responseMap[entry.path];
      else
        responseMap[entry.path] = [];
      return responseMap[entry.path].push(entry);
    });
    each(responseMap, function (entries, path) {
      return responseMap[path] = sortBy(entries, function (entry) {
        return 1e9 - size(entry.query);
      });
    });
    return responseMap;
  };
  entryAllowedForRequest = function (request, responseMapEntry) {
    var matches;
    matches = true;
    each(responseMapEntry.query, function (value, name) {
      if (!patternMatcher(value)(request.query[name]))
        return matches = false;
    });
    return matches;
  };
  module.exports = function (fsHash) {
    var responseMap;
    responseMap = buildResponseMap(fsHash);
    return function (request) {
      var allowedEntries, entries;
      entries = responseMap[stripExtension(request.path)];
      if (entries === void 0)
        return;
      allowedEntries = filter(entries, function (entry) {
        return entryAllowedForRequest(request, entry);
      });
      if (allowedEntries.length === 0)
        return;
      return allowedEntries[0].content;
    };
  };
}.call(this);
