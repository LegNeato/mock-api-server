// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var cache$, compileNFA, each, FAIL, failOnAny, keys, patternMatcher, START, WILDCARD;
  cache$ = require('underscore');
  each = cache$.each;
  keys = cache$.keys;
  WILDCARD = '*';
  FAIL = 0;
  START = 1;
  failOnAny = function () {
    var state;
    state = {};
    state[WILDCARD] = FAIL;
    return state;
  };
  compileNFA = function (pattern) {
    var currentState, states, successState;
    states = [];
    states[FAIL] = failOnAny();
    currentState = START;
    each(pattern, function (char) {
      if (null != states[currentState])
        states[currentState];
      else
        states[currentState] = failOnAny();
      if (char === WILDCARD) {
        return states[currentState][WILDCARD] = currentState;
      } else {
        states[currentState][char] = currentState + 1;
        return currentState += 1;
      }
    });
    if (null != states[currentState])
      states[currentState];
    else
      states[currentState] = failOnAny();
    successState = currentState;
    return {
      states: states,
      successState: successState
    };
  };
  module.exports = patternMatcher = function (pattern) {
    var cache$1, states, successState;
    if (!pattern)
      return false;
    cache$1 = compileNFA(pattern);
    states = cache$1.states;
    successState = cache$1.successState;
    return function (value) {
      var currentStates;
      currentStates = {};
      currentStates[START] = true;
      each(value, function (char) {
        var nextStates;
        nextStates = {};
        each(keys(currentStates), function (state) {
          nextStates[states[state][WILDCARD]] = true;
          if (null != states[state][char])
            return nextStates[states[state][char]] = true;
        });
        return currentStates = nextStates;
      });
      return null != currentStates[successState];
    };
  };
}.call(this);
