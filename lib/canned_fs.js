// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var async, cache$, each, extend, fs, map, path, recursivelyFindFiles;
  async = require('async');
  path = require('path');
  fs = require('fs');
  cache$ = require('underscore');
  each = cache$.each;
  extend = cache$.extend;
  map = cache$.map;
  recursivelyFindFiles = function (root, resultPrefix, done) {
    return fs.readdir(root, function (err, filenames) {
      var files, fileStat;
      if (null != err)
        return done(err);
      files = map(filenames, function (filename) {
        return {
          path: path.join(root, filename),
          resultPath: path.join(resultPrefix, filename)
        };
      });
      fileStat = function (file, done) {
        return fs.stat(file.path, done);
      };
      return async.map(files, fileStat, function (err, statBuffers) {
        var results, subActions;
        if (null != err)
          return done(err);
        results = [];
        subActions = [];
        each(statBuffers, function (statBuffer, i) {
          var file;
          file = files[i];
          if (statBuffer.isDirectory()) {
            return subActions.push(function (done) {
              return recursivelyFindFiles(file.path, file.resultPath, done);
            });
          } else {
            return results.push(file.resultPath);
          }
        });
        return async.series(subActions, function (err, listOfSubResults) {
          if (null != err)
            return done(err);
          each(listOfSubResults, function (subResults) {
            return results = results.concat(subResults);
          });
          return done(null, results);
        });
      });
    });
  };
  module.exports = function (path, done) {
    return recursivelyFindFiles(path, '/', function (err, files) {
      var hash;
      if (null != err)
        return done(err);
      hash = {};
      each(files, function (file) {
        return hash[file] = 42;
      });
      return done(null, hash);
    });
  };
}.call(this);
