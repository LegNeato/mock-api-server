// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var express, loadJsonFiles, lumber, MockApiServer, pick, staticResponseMap;
  express = require('express');
  loadJsonFiles = require('./load_json_files');
  staticResponseMap = require('./static_response_map');
  lumber = require('clumber');
  pick = require('underscore').pick;
  MockApiServer = function () {
    function MockApiServer(param$) {
      var instance$;
      instance$ = this;
      this._cannedResponses = function (a, b, c) {
        return MockApiServer.prototype._cannedResponses.apply(instance$, arguments);
      };
      this.initLogger = function () {
        return MockApiServer.prototype.initLogger.apply(instance$, arguments);
      };
      this.options = param$;
      this.options = this.options;
      this.logger = this.initLogger();
    }
    MockApiServer.prototype.start = function (done) {
      this.logger.info('[STARTING-SERVER]');
      this.app = express();
      this.app.use(this._cannedResponses);
      return loadJsonFiles('test/mock-api', function (this$) {
        return function (err, hash) {
          this$.staticResponseMap = staticResponseMap(hash);
          return this$.server = this$.app.listen(this$.options.port, done);
        };
      }(this));
    };
    MockApiServer.prototype.stop = function () {
      this.logger.info('[STOPPING-SERVER]');
      return this.server.close();
    };
    MockApiServer.prototype.initLogger = function () {
      var transports;
      transports = [];
      transports.push(new lumber.transports.Console);
      transports.push(new lumber.transports.File({
        filename: './log/full.log',
        level: 'silly'
      }));
      return new lumber.Logger({ transports: transports });
    };
    MockApiServer.prototype._cannedResponses = function (req, res, next) {
      var request, response;
      request = pick(req, 'method', 'path', 'query');
      response = this.staticResponseMap(request);
      this.logger.info('[MOCK-RESPONSE]', response);
      if (response === void 0)
        return next();
      res.header('Content-Type', 'application/json');
      return res.send(JSON.stringify(response));
    };
    return MockApiServer;
  }();
  module.exports = function (options, cb) {
    var server;
    server = new MockApiServer(options);
    return server.start(function (err) {
      if (!(null != cb))
        return;
      return cb(err, server);
    });
  };
}.call(this);
