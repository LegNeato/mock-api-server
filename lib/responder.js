// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var cache$, compose, each, extend, filter, identity, map, patternMatcher, Responder, ResponseSpecification, size, sortBy, stripExtension, url;
  patternMatcher = require('./pattern_matcher');
  cache$ = require('underscore');
  compose = cache$.compose;
  each = cache$.each;
  extend = cache$.extend;
  filter = cache$.filter;
  identity = cache$.identity;
  map = cache$.map;
  size = cache$.size;
  sortBy = cache$.sortBy;
  url = require('url');
  stripExtension = function (path) {
    return path.replace(/\.json$/, '');
  };
  ResponseSpecification = function () {
    function ResponseSpecification(options) {
      var cache$1;
      cache$1 = options;
      this.method = cache$1.method;
      this.path = cache$1.path;
      this.query = cache$1.query;
      this.content = cache$1.content;
      this.changeNumber = cache$1.changeNumber;
      this.path = stripExtension(this.path);
      if (null != this.changeNumber)
        this.changeNumber;
      else
        this.changeNumber = 0;
      if (null != options.replaceKey)
        this.content = function (content) {
          eval('content.' + options.replaceKey + ' = ' + JSON.stringify(options.replaceValue));
          return content;
        };
    }
    ResponseSpecification.prototype.matches = function (request) {
      if (!(stripExtension(request.path) === this.path))
        return false;
      if (!(request.method === this.method))
        return false;
      return this._matchesQuery(request.query);
    };
    ResponseSpecification.prototype['with'] = function (params) {
      return new ResponseSpecification(extend({}, this, params));
    };
    ResponseSpecification.prototype._matchesQuery = function (query) {
      var matches;
      matches = true;
      each(this.query, function (value, name) {
        if (!patternMatcher(value)(query[name]))
          return matches = false;
      });
      return matches;
    };
    return ResponseSpecification;
  }();
  Responder = function () {
    function Responder(fsHash) {
      this.specs = this._buildResponseMap(fsHash);
      this.serialNumber = 0;
    }
    Responder.prototype.respondTo = function (request) {
      var allowedEntries, contentTransform, response;
      allowedEntries = filter(this.specs, function (entry) {
        return entry.matches(request);
      });
      if (allowedEntries.length === 0)
        return;
      contentTransform = identity;
      response = void 0;
      each(allowedEntries, function (entry) {
        if (typeof entry.content === 'function') {
          return contentTransform = compose(entry.content, contentTransform);
        } else if (typeof response === 'undefined') {
          return response = contentTransform(entry.content);
        }
      });
      return response;
    };
    Responder.prototype.withResponseSpecification = function (newSpec) {
      var answer;
      answer = this._freshCopyWith({
        specs: this._specsWith(newSpec),
        serialNumber: this.serialNumber + 1
      });
      return answer;
    };
    Responder.prototype._specsWith = function (newSpec) {
      var specs;
      specs = this.specs.slice(0);
      specs.push(newSpec['with']({ changeNumber: this.serialNumber + 1 }));
      return this._sortSpecs(specs);
    };
    Responder.prototype._freshCopyWith = function (parameters) {
      return extend(new Responder({}), parameters);
    };
    Responder.prototype._extractMethod = function (filename) {
      var method, path;
      method = filename.split('/')[1];
      path = filename.replace(/\/[^\/]*/, '');
      return {
        method: method,
        path: path
      };
    };
    Responder.prototype._buildResponseMap = function (fsHash) {
      var specs;
      specs = map(fsHash, function (this$) {
        return function (content, filename) {
          return this$._buildStaticResponseEntry(filename, content);
        };
      }(this));
      return this._sortSpecs(specs);
    };
    Responder.prototype._sortSpecs = function (specs) {
      return sortBy(specs, function (spec) {
        return 1e9 - 1e3 * size(spec.query) - spec.changeNumber;
      });
    };
    Responder.prototype._buildStaticResponseEntry = function (filename, content) {
      var cache$1, cache$2, method, path, pathname, query;
      cache$1 = url.parse(filename, true);
      pathname = cache$1.pathname;
      query = cache$1.query;
      cache$2 = this._extractMethod(stripExtension(pathname));
      method = cache$2.method;
      path = cache$2.path;
      return new ResponseSpecification({
        content: content,
        method: method,
        path: path,
        query: query
      });
    };
    return Responder;
  }();
  module.exports = {
    Responder: Responder,
    ResponseSpecification: ResponseSpecification
  };
}.call(this);
