// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var buildResponseMap, buildStaticResponseEntry, cache$, each, entryAllowedForRequest, extractMethod, filter, patternMatcher, ResponseMap, size, sortBy, stripExtension, url;
  patternMatcher = require('./pattern_matcher');
  cache$ = require('underscore');
  each = cache$.each;
  filter = cache$.filter;
  size = cache$.size;
  sortBy = cache$.sortBy;
  url = require('url');
  stripExtension = function (path) {
    return path.replace(/\.json$/, '');
  };
  extractMethod = function (filename) {
    var method, path;
    method = filename.split('/')[1];
    path = filename.replace(/\/[^\/]*/, '');
    return {
      method: method,
      path: path
    };
  };
  buildStaticResponseEntry = function (filename, content) {
    var cache$1, cache$2, method, path, pathname, query;
    cache$1 = url.parse(filename, true);
    pathname = cache$1.pathname;
    query = cache$1.query;
    cache$2 = extractMethod(stripExtension(pathname));
    method = cache$2.method;
    path = cache$2.path;
    return {
      content: content,
      method: method,
      path: path,
      query: query
    };
  };
  buildResponseMap = function (fsHash) {
    var responseMap;
    responseMap = {};
    each(fsHash, function (content, filename) {
      var entry;
      entry = buildStaticResponseEntry(filename, content);
      if (null != responseMap[entry.path])
        responseMap[entry.path];
      else
        responseMap[entry.path] = [];
      return responseMap[entry.path].push(entry);
    });
    each(responseMap, function (entries, path) {
      return responseMap[path] = sortBy(entries, function (entry) {
        return 1e9 - size(entry.query);
      });
    });
    return responseMap;
  };
  entryAllowedForRequest = function (request, responseMapEntry) {
    var matches;
    if (!(request.method === responseMapEntry.method))
      return false;
    matches = true;
    each(responseMapEntry.query, function (value, name) {
      if (!patternMatcher(value)(request.query[name]))
        return matches = false;
    });
    return matches;
  };
  ResponseMap = function () {
    function ResponseMap(fsHash) {
      this.responseMap = buildResponseMap(fsHash);
    }
    ResponseMap.prototype.respondTo = function (request) {
      var allowedEntries, entries;
      entries = this.responseMap[stripExtension(request.path)];
      if (entries === void 0)
        return;
      allowedEntries = filter(entries, function (entry) {
        return entryAllowedForRequest(request, entry);
      });
      if (allowedEntries.length === 0)
        return;
      return allowedEntries[0].content;
    };
    return ResponseMap;
  }();
  module.exports = ResponseMap;
}.call(this);
